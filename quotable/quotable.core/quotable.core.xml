<?xml version="1.0"?>
<doc>
    <assembly>
        <name>quotable.core</name>
    </assembly>
    <members>
        <member name="T:quotable.core.Author">
            <summary>
            The author of a quote.
            </summary>
        </member>
        <member name="P:quotable.core.Author.Id">
            <summary>
            The unique identifier for the author.
            </summary>
        </member>
        <member name="P:quotable.core.Author.FirstName">
            <summary>
            The first name of the author.
            </summary>
        </member>
        <member name="P:quotable.core.Author.LastName">
            <summary>
            The last name fo the author
            </summary>
        </member>
        <member name="P:quotable.core.Author.QuoteAuthor">
            <summary>
            The relation of quote to author
            </summary>
        </member>
        <member name="T:quotable.core.QuotableContext">
            <summary>
            The database context that provides access to quote and other data.
            </summary>
        </member>
        <member name="M:quotable.core.QuotableContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:quotable.core.QuotableContext.Quotes">
            <summary>
            Used to access quotes in the database.
            </summary>
        </member>
        <member name="P:quotable.core.QuotableContext.Authors">
            <summary>
            Used to access authors in the database.
            </summary>
        </member>
        <member name="M:quotable.core.QuotableContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:quotable.core.DefaultRandomQuoteGenerator">
            <summary>
            implements random quote provider to return quotes
            </summary>
        </member>
        <member name="M:quotable.core.DefaultRandomQuoteGenerator.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            this constructor takes in a string of quotes and returns those quotes 
            to the console
            </summary>
            <param name="quotesData"></param>
        </member>
        <member name="M:quotable.core.DefaultRandomQuoteGenerator.getAuthor(System.Int64)">
            <summary>
            this constructor takes in a long of the ID for the quote and returns 
            the author
            </summary>
            <param name="numAuths"></param>
            <returns></returns>
        </member>
        <member name="M:quotable.core.DefaultRandomQuoteGenerator.getID(System.Int64)">
            <summary>
            this constructor takes in a long of the ID for the quote 
            and returns the quote ID
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:quotable.core.DefaultRandomQuoteGenerator.getQuotes(System.Int64)">
            <summary>
            this constructor takes in a long of the ID for the quote
            and returns the quote
            </summary>
            <param name="numQuotes"></param>
            <returns></returns>
        </member>
        <member name="T:quotable.core.Quote">
            <summary>
            A quote in the system.
            </summary>
        </member>
        <member name="P:quotable.core.Quote.Id">
            <summary>
            The unique identifier for the quote.
            </summary>
        </member>
        <member name="P:quotable.core.Quote.Body">
            <summary>
            The body of the quote.
            </summary>
        </member>
        <member name="P:quotable.core.Quote.Authors">
            <summary>
            The collection of authors of the quote
            </summary>
        </member>
        <member name="P:quotable.core.Quote.QuoteAuthor">
            <summary>
            The relation of quote to author
            </summary>
        </member>
        <member name="T:quotable.core.QuoteAuthor">
            <summary>
            Represents the many-to-many relation between quotes and authors
            </summary>
        </member>
        <member name="P:quotable.core.QuoteAuthor.QuoteId">
            <summary>
            The ID of the Quote related to the author.
            </summary>
        </member>
        <member name="P:quotable.core.QuoteAuthor.Quote">
            <summary>
            The Quote related to the author.
            </summary>
        </member>
        <member name="P:quotable.core.QuoteAuthor.AuthorId">
            <summary>
            The ID of the author related to the Quote.
            </summary>
        </member>
        <member name="P:quotable.core.QuoteAuthor.Author">
            <summary>
            The author related to the Quote.
            </summary>
        </member>
        <member name="T:quotable.core.RandomQuoteProvider">
            <summary>
            Provider for random quotes
            </summary>
        </member>
        <member name="M:quotable.core.RandomQuoteProvider.getQuotes(System.Int64)">
            <summary>
            Method of type: IEnumerable string called getQuotes
            which takes in a long: number of quotes as a perameter
            </summary>
            <param name="numQuotes"></param>
            <returns></returns>
        </member>
        <member name="M:quotable.core.RandomQuoteProvider.getID(System.Int64)">
            <summary>
            Method of type: enum long called getID
            which takes in a long: number of ID as a perameter
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:quotable.core.RandomQuoteProvider.getAuthor(System.Int64)">
            <summary>
            Method of type: IEnumerable string called getAuthor
            which takes in a long: number of authors as a perameter
            </summary>
            <param name="numAuthors"></param>
            <returns></returns>
        </member>
        <member name="T:quotable.core.SimpleRandomQuoteProvider">
            <summary>
            implements random quote provider and returns quote per method based on input
            </summary>
        </member>
        <member name="M:quotable.core.SimpleRandomQuoteProvider.getAuthor(System.Int64)">
            <summary>
            hardcoded to return the author 
            takes in a value to determine author
            for the quote
            </summary>
            <param name="numAuths"></param>
            <returns></returns>
        </member>
        <member name="M:quotable.core.SimpleRandomQuoteProvider.getID(System.Int64)">
            <summary>
            hardcoded to return the ID of the quote you pass
            in as a perameter
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:quotable.core.SimpleRandomQuoteProvider.getQuotes(System.Int64)">
            <summary>
            hardcoded to return the numQuotes 
            takes in a value to determine numQuotes
            for how many random quotes you want to randomly create
            </summary>
            <param name="numQuotes"></param>
            <returns> returns the array of numQuotes </returns>
        </member>
    </members>
</doc>
